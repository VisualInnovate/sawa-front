import{_ as f,y as m,o as l,e as i,q as u,x as h,h as s,t as r,a8 as T,w as d,D as p,F as c,z as y,n as g,a9 as v,i as D,l as V}from"./main-9e03f6d8.js";import{V as b}from"./VForm-5b3d0d7e.js";const E={data(){return{rooms:[],selectedValue:"",sessionTypes:[],treatmentTypes:[],doctors:[],roomType:"",formData:{title:"",capacity:"",room_type_id:"",session:"",user_id:"",treatmentTypes:""}}},methods:{getAllDoctor(){m.get("api/all/doctors").then(e=>{this.doctors=e.data.doctors,console.log(this.doctors)}).catch(e=>{console.error("Error retrieving doctors:",e)})},getTypesesstion(){m.get("api/session-types").then(e=>{this.sessionTypes=e.data.sessionTypes,console.log(this.sessionTypes)}).catch(e=>{console.error("Error retrieving doctors:",e)})},getTreatmentTypes(){m.get("api/treatment-types").then(e=>{this.treatmentTypes=e.data.treatmentTypes,console.log(this.treatmentTypes)}).catch(e=>{console.error("Error retrieving Appointment Types:",e)})},getoneRoom(e){m.get(`api/get/room/${e}`).then(o=>{this.formData.title=o.data.rooms.title,this.formData.user_id=o.data.rooms.user,console.log(o.date.rooms.user),this.formData.treatmentTypes=o.data.rooms.treatment_type,this.formData.capacity=o.data.rooms.capacity,console.log("ddd",this.rooms)})},updateData(){m.post(`/api/update/room/${this.$route.params.id}`,this.formData).then(e=>{console.log("Data updated:",e.data),this.isSuccessModalOpen=!0,this.$router.push({name:"Rooms"})}).catch(e=>{console.error("Error updating data:",e)})}},mounted(){this.getTypesesstion(),this.getAllDoctor(),this.getTreatmentTypes(),this.getoneRoom(this.$route.params.id)}},U={class:"name-input"},k={for:"title"},w={for:"selectedValue"},$=["value"],B=["value"],F={for:"doctors"},M=["value"],S={for:"roomType"},A={value:"1"},N={value:"2"},R={class:"input-container"},q={for:"roomType",class:"input-label"};function z(e,o,C,I,a,_){return l(),i("div",null,[u(b,{onSubmit:o[6]||(o[6]=V(t=>_.updateData(),["prevent"]))},{default:h(()=>[s("div",U,[s("label",k,r(e.$t("room")),1),u(T,{modelValue:a.formData.title,"onUpdate:modelValue":o[0]||(o[0]=t=>a.formData.title=t),"hide-details":""},null,8,["modelValue"]),s("label",w,r(e.$t("typesessaion")),1),d(s("select",{"onUpdate:modelValue":o[1]||(o[1]=t=>e.session=t),class:"custom-select"},[(l(!0),i(c,null,y(a.sessionTypes,(t,n)=>(l(),i("option",{key:n,value:t.value},r(t.title),9,$))),128))],512),[[p,e.session]]),s("label",null,r(e.$t("Typetreatment")),1),d(s("select",{"onUpdate:modelValue":o[2]||(o[2]=t=>a.formData.treatment_id=t),class:"custom-select"},[(l(!0),i(c,null,y(a.treatmentTypes,(t,n)=>(l(),i("option",{key:n,value:t.value},r(t.title),9,B))),128))],512),[[p,a.formData.treatment_id]]),s("label",F,r(e.$t("roomdoctor")),1),d(s("select",{"onUpdate:modelValue":o[3]||(o[3]=t=>a.formData.user_id=t),class:"custom-select"},[(l(!0),i(c,null,y(a.doctors,(t,n)=>(l(),i("option",{key:n,value:t.value},r(t.title),9,M))),128))],512),[[p,a.formData.user_id]]),s("label",S,r(e.$t("typeroom")),1),d(s("select",{"onUpdate:modelValue":o[4]||(o[4]=t=>a.formData.room_type_id=t),class:"custom-select"},[s("option",A,r(e.$t("typeroom1")),1),s("option",N,r(e.$t("typeroom2")),1)],512),[[p,a.formData.room_type_id]]),s("div",R,[s("label",q,r(e.$t("typeroom")),1),d(s("input",{type:"number",id:"roomType","onUpdate:modelValue":o[5]||(o[5]=t=>a.formData.capacity=t),class:"number-input"},null,512),[[g,a.formData.capacity]])])]),u(v,{type:"submit",class:"mt-2 seed",style:{width:"606px"}},{default:h(()=>[D(r(e.$t("submit")),1)]),_:1})]),_:1})])}const j=f(E,[["render",z],["__scopeId","data-v-6204f75a"]]);export{j as default};
